{"ast":null,"code":"import { progress, mix, fillOffset, defaultOffset, noopReturn } from '@motionone/utils';\nimport { getEasingForSegment } from './easing.es.js';\n\nvar clampProgress = function clampProgress(p) {\n  return Math.min(1, Math.max(p, 0));\n};\n\nfunction interpolate(output) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset(output.length);\n  var easing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noopReturn;\n  var length = output.length;\n  /**\n   * If the input length is lower than the output we\n   * fill the input to match. This currently assumes the input\n   * is an animation progress value so is a good candidate for\n   * moving outside the function.\n   */\n\n  var remainder = length - input.length;\n  remainder > 0 && fillOffset(input, remainder);\n  return function (t) {\n    var i = 0;\n\n    for (; i < length - 2; i++) {\n      if (t < input[i + 1]) break;\n    }\n\n    var progressInRange = clampProgress(progress(input[i], input[i + 1], t));\n    var segmentEasing = getEasingForSegment(easing, i);\n    progressInRange = segmentEasing(progressInRange);\n    return mix(output[i], output[i + 1], progressInRange);\n  };\n}\n\nexport { interpolate };","map":null,"metadata":{},"sourceType":"module"}