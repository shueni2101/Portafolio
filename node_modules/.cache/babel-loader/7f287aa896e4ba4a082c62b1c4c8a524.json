{"ast":null,"code":"var r = require(\"react\");\n\nfunction e(r) {\n  return r && \"object\" == typeof r && \"default\" in r ? r : {\n    default: r\n  };\n}\n\nvar t = /*#__PURE__*/e(require(\"fontfaceobserver\"));\n\nmodule.exports = function (e, o, n) {\n  void 0 === e && (e = []);\n  var i = void 0 === o ? {} : o,\n      u = i.testString,\n      a = i.timeout,\n      c = (void 0 === n ? {\n    showErrors: !1\n  } : n).showErrors,\n      f = r.useState(!1),\n      s = f[0],\n      l = f[1],\n      d = JSON.stringify(e);\n  return r.useEffect(function () {\n    var r = JSON.parse(d).map(function (r) {\n      return new t.default(r.family, {\n        weight: r.weight,\n        style: r.style,\n        stretch: r.stretch\n      }).load(u, a);\n    });\n    Promise.all(r).then(function () {\n      return l(!0);\n    }).catch(function () {\n      c && console.error(\"An error occurred during font loading\");\n    });\n  }, [d, u, a, c]), s;\n};","map":{"version":3,"mappings":";;;;;;;;;;iBAgDA,UACEA,CADF,EACEA,CADF,EACEA,CADF,EACEA;EAAAA,qBAAwB,EAAxBA;EAAwB,uBACW,EADX,GACWC,CADX;EAAA,IACtBC,gBADsB;EAAA,IACVC,aADU;EAAA,IAEtBC,oBAAuB;IAAEA,aAAY;EAAd,CAAvBA,GAAqCC,CAArCD,YAFsB;EAAA,IAEtBA,IAEkCE,YAAS,CAATA,CAJZ;EAAA,IAIjBC,QAJiB;EAAA,IAILC,QAJK;EAAA,IAKlBC,IAAkBC,KAAKC,SAALD,CAAeV,CAAfU,CALA;EA2BxB,OApBAE,YAAU;IACR,IAAMC,IAAWH,KAAKI,KAALJ,CAAWD,CAAXC,EAA4BK,GAA5BL,CACf;MAAA,WACMM,SADN,CACMA,EADHC,MAAH,EAC+B;QAC3BC,UAFOA,MACoB;QAE3BC,SAHeA,KACY;QAG3BC,WAJsBA;MACK,CAD/B,EAKKC,IALL,CAKUnB,CALV,EAKsBC,CALtB;IAKsBA,CANPO,CAAjB;IASAY,QAAQC,GAARD,CAAYT,CAAZS,EACGE,IADHF,CACQ;MAAA,OAAMd,GAAc,CAAdA,CAAN;IAAoB,CAD5Bc,EAC4BG,KAD5BH,CAES;MACDlB,KAEFsB,QAAQC,KAARD,CAAQC,uCAARD,CAFEtB;IAEMuB,CALdL;EAKcK,CAfhBf,EAkBG,CAACH,CAAD,EAAkBP,CAAlB,EAA8BC,CAA9B,EAAuCC,CAAvC,CAlBHQ,GAoBOL,CAAP;AAAOA","names":["fontFaces","o","testString","timeout","showErrors","n","useState","isResolved","setIsResolved","fontFacesString","JSON","stringify","useEffect","promises","parse","map","FontFaceObserver","family","weight","style","stretch","load","Promise","all","then","catch","console","error"],"sources":["C:\\Users\\lauta\\Desktop\\portafolio\\my-portafolio\\node_modules\\use-font-face-observer\\src\\index.ts"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport FontFaceObserver from \"fontfaceobserver\"\n\n/**\n * @typedef FontFace\n * @property {string} family The font-family: Roboto, Inter, Open Sans, etc\n * @property {string|number} weight The font-weight: normal, bold, 800, etc\n * @property {string} style The font-style: normal, italic, oblique\n * @property {string} stretch The font stretch: normal, condensed, expanded, etc\n */\nexport interface FontFace {\n  family: string\n  weight?:\n    | `light`\n    | `normal`\n    | `bold`\n    | `bolder`\n    | `100`\n    | `200`\n    | `300`\n    | `400`\n    | `500`\n    | `600`\n    | `700`\n    | `800`\n    | `900`\n  style?: `normal` | `italic` | `oblique`\n  stretch?:\n    | `normal`\n    | `ultra-condensed`\n    | `extra-condensed`\n    | `condensed`\n    | `semi-condensed`\n    | `semi-expanded`\n    | `expanded`\n    | `extra-expanded`\n    | `ultra-expanded`\n}\n\nexport interface Options {\n  testString?: string\n  timeout?: number\n}\n\nexport interface Config {\n  showErrors: boolean\n}\n\nfunction useFontFaceObserver(\n  fontFaces: FontFace[] = [],\n  { testString, timeout }: Options = {},\n  { showErrors }: Config = { showErrors: false }\n): boolean {\n  const [isResolved, setIsResolved] = useState(false)\n  const fontFacesString = JSON.stringify(fontFaces)\n\n  useEffect(() => {\n    const promises = JSON.parse(fontFacesString).map(\n      ({ family, weight, style, stretch }: FontFace) =>\n        new FontFaceObserver(family, {\n          weight,\n          style,\n          stretch,\n        }).load(testString, timeout)\n    )\n\n    Promise.all(promises)\n      .then(() => setIsResolved(true))\n      .catch(() => {\n        if (showErrors) {\n          // eslint-disable-next-line no-console\n          console.error(`An error occurred during font loading`)\n        }\n      })\n  }, [fontFacesString, testString, timeout, showErrors])\n\n  return isResolved\n}\n\nexport default useFontFaceObserver\n"]},"metadata":{},"sourceType":"script"}